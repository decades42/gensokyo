# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(gensokyo)

include(FetchContent)

# Fix warnings about DOWNLOAD_EXTRACT_TIMESTAMP
if(POLICY CMP0135)
	cmake_policy(SET CMP0135 NEW)
endif()
message(STATUS "Fetching fmt (f449ca0525098380e0caff6c452c617b3d58879b)...")
FetchContent_Declare(fmt
	GIT_REPOSITORY
		"https://github.com/fmtlib/fmt"
	GIT_TAG
		f449ca0525098380e0caff6c452c617b3d58879b
)
FetchContent_MakeAvailable(fmt)

if(BUILD_TESTS) # build-tests
	message(STATUS "Fetching Catch2 (v3.3.2)...")
	FetchContent_Declare(Catch2
		GIT_REPOSITORY
			"https://github.com/catchorg/Catch2"
		GIT_TAG
			v3.3.2
		GIT_SHALLOW
			ON
	)
	FetchContent_MakeAvailable(Catch2)

endif()
# Target: library
set(library_SOURCES
	"./src/math_funcs.cpp"
	"./src/memory.cpp"
	"./src/pattern.cpp"
	cmake.toml
)

if(WIN32) # windows
	list(APPEND library_SOURCES
		"./src/windows/module.cpp"
	)
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Linux") # linux
	list(APPEND library_SOURCES
		"./src/linux/module.cpp"
	)
endif()

add_library(library STATIC)

target_sources(library PRIVATE ${library_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${library_SOURCES})

add_library(gensokyo::gensokyo ALIAS library)
if(WIN32) # windows
	target_compile_definitions(library PUBLIC
		NOMINMAX
		WINDOWS
	)
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Linux") # linux
	target_compile_definitions(library PUBLIC
		LINUX
	)
endif()

if(MSVC) # msvc
	target_compile_definitions(library PUBLIC
		MSVC
	)
endif()

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "GNU") # gcc
	target_compile_definitions(library PUBLIC
		GCC
	)
endif()

if((CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_CXX_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$") OR (CMAKE_C_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_C_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$")) # clang
	target_compile_definitions(library PUBLIC
		CLANG
	)
endif()

if(CMAKE_SIZEOF_VOID_P EQUAL 4) # x32
	target_compile_definitions(library PUBLIC
		ENVIRONMENT32
	)
endif()

if(CMAKE_SIZEOF_VOID_P EQUAL 8) # x64
	target_compile_definitions(library PUBLIC
		ENVIRONMENT64
	)
endif()

target_compile_features(library PUBLIC
	cxx_std_23
)

if(MSVC) # msvc
	target_compile_options(library PRIVATE
		"/permissive-"
		"/w14640"
		"/EHsc"
		"/MP"
	)
endif()

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "GNU") # gcc
	target_compile_options(library PRIVATE
		-Wall
		-Wextra
		-Wshadow
		-pedantic
		-march=native
	)
endif()

if((CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_CXX_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$") OR (CMAKE_C_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_C_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$")) # clang
	target_compile_options(library PRIVATE
		-Wall
		-Wextra
		-Wshadow
		-pedantic
		-march=native
	)
endif()

target_include_directories(library PUBLIC
	"./include/"
)

target_link_libraries(library PUBLIC
	fmt::fmt
)

# Target: pattern
if(BUILD_TESTS) # build-tests
	set(pattern_SOURCES
		"tests/pattern.cpp"
		cmake.toml
	)

	add_executable(pattern)

	target_sources(pattern PRIVATE ${pattern_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${pattern_SOURCES})

	target_compile_features(pattern PRIVATE
		cxx_std_23
	)

	if(MSVC) # msvc
		target_compile_options(pattern PRIVATE
			"/permissive-"
			"/w14640"
			"/EHsc"
			"/MP"
		)
	endif()

	if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "GNU") # gcc
		target_compile_options(pattern PRIVATE
			-Wall
			-Wextra
			-Wshadow
			-pedantic
			-march=native
		)
	endif()

	target_link_libraries(pattern PRIVATE
		Catch2::Catch2WithMain
		gensokyo::gensokyo
	)

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT pattern)
	endif()

endif()
# Target: cpu
if(BUILD_TESTS) # build-tests
	set(cpu_SOURCES
		"tests/cpu.cpp"
		cmake.toml
	)

	add_executable(cpu)

	target_sources(cpu PRIVATE ${cpu_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${cpu_SOURCES})

	target_compile_features(cpu PRIVATE
		cxx_std_23
	)

	if(MSVC) # msvc
		target_compile_options(cpu PRIVATE
			"/permissive-"
			"/w14640"
			"/EHsc"
			"/MP"
		)
	endif()

	if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "GNU") # gcc
		target_compile_options(cpu PRIVATE
			-Wall
			-Wextra
			-Wshadow
			-pedantic
			-march=native
		)
	endif()

	target_link_libraries(cpu PRIVATE
		Catch2::Catch2WithMain
		gensokyo::gensokyo
	)

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT cpu)
	endif()

endif()
